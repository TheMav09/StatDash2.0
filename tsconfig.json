{
  "compilerOptions": {
    // Specifies the library files to be included in the compilation.
    // "dom" includes types for the DOM API (e.g., document, window).
    // "dom.iterable" adds support for iterating over DOM collections.
    // "esnext" enables the latest ECMAScript features.
    "lib": ["dom", "dom.iterable", "esnext"],

    // Allows JavaScript files to be compiled along with TypeScript files.
    "allowJs": true,

    // Skips type checking for all declaration files (.d.ts).
    // This can speed up compilation but may hide some potential issues.
    "skipLibCheck": true,

    // Enables strict type checking options for TypeScript.
    // This enforces best practices and helps catch potential errors.
    "strict": true,

    // Prevents the compiler from emitting output files.
    // Useful in a Next.js project where Babel handles the transpilation.
    "noEmit": true,

    // Ensures compatibility with ES modules by allowing default imports from CommonJS modules.
    "esModuleInterop": true,

    // Allows default imports from modules that do not have a default export.
    "allowSyntheticDefaultImports": true,

    // Specifies the module code generation: "esnext" uses the latest ECMAScript standard.
    // This is often used with modern module bundlers like Webpack.
    "module": "esnext",

    // Determines how modules are resolved. "node" mimics Node.js module resolution behavior.
    // This is crucial for resolving modules installed in node_modules.
    "moduleResolution": "node",

    // Allows importing JSON files as modules.
    // This is useful when you need to load configuration data or other static assets.
    "resolveJsonModule": true,

    // Treats each file as a separate module.
    // This can be helpful in projects that do not have a global namespace or to prevent global conflicts.
    "isolatedModules": true,

    // Specifies how JSX is handled: "preserve" keeps JSX as-is for further transformation by Babel.
    "jsx": "preserve",

    // Enables incremental compilation, which speeds up subsequent builds by storing state between compilations.
    "incremental": true,

    // Adds custom plugins to the TypeScript compiler.
    // "typescript-plugin-css-modules" is used to provide type checking for CSS modules.
    "plugins": [
      {
        "name": "typescript-plugin-css-modules"
      }
    ],

    // Defines custom module resolution paths.
    // The "@/*" alias maps to the root directory, simplifying imports across the project.
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": [
    // Includes the TypeScript environment file for Next.js.
    "next-env.d.ts",

    // Includes all TypeScript files in the project.
    "**/*.ts",
    "**/*.tsx",

    // Includes type definitions generated by Next.js during the build process.
    ".next/types/**/*.ts"
  ],
  "exclude": [
    // Excludes the node_modules directory from the compilation.
    // This prevents unnecessary type checking of third-party libraries.
    "node_modules"
  ]
}
